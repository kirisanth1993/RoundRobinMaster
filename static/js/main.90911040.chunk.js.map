{"version":3,"sources":["assets/arjuna.jpg","assets/charen.jpg","assets/commonAvatar.png","assets/dilrukshi.jpg","assets/dinusha.jpg","assets/dulith.jpg","assets/gayal.png","assets/guest.png","assets/guest1.jpg","assets/kavingi.jpg","assets/kirisanth.jpg","assets/malya.jpg","assets/shanaka.jpg","assets/shemaya.jpg","assets/yasasmi.jpg","components/layout/Header.js","components/sessiionSetUp/GuestAddingModal.js","components/sessiionSetUp/ListSelection.js","components/sessiionSetUp/nameList.js","components/sessiionSetUp/SpeakerOrdering.js","components/launch/Launch.js","components/sessiionSetUp/SetUp.js","components/layout/Body.js","components/layout/Layout.js","App.js","reportWebVitals.js","index.js","assets/tmLogo.png","assets sync /^/.*$"],"names":["Header","props","Grid","container","display","className","height","src","logo","Typography","GuestAddingModal","isModalOpen","modalCloseAction","guestDataCallback","useState","name","isError","newGuestList","setNewGuestList","Dialog","open","onClose","DialogTitle","id","fontSize","onClick","DialogContent","DialogContentText","map","singleGuest","singleGuestIndex","fullWidth","item","lg","md","TextField","size","label","variant","error","value","onChange","e","index","target","nameChangeAction","length","splice","canAdd","push","guestAddAction","DialogActions","Button","canSave","saveGuestAction","ListSelection","speakerList","singleSpeaker","singleSpeakerIndex","sm","isSelected","speakerSelectAction","width","require","imageLink","default","nameList","SpeakerOrdering","orderedList","reOrderCallback","topic","topicChangeAction","launchCallback","type","endIcon","Launch","personList","backToSetupAction","cloneDeep","setSpeakerList","currentSpeakerIndex","setCurrentSpeakerIndex","useEffect","url","justifyContent","images","showBullets","showNavs","navSize","loop","onStartSlide","slice","SetUp","isGuestModalOpen","setIsGuestModalOpen","selectedTimer","setSelectedTimer","selectedTimerObj","setSelectedTimerObj","timerOptions","setTimerOptions","selectedRoundRobin","setSelectedRoundRobin","selectedRoundRobinObj","setSelectedRoundRobinObj","roundRobinOptions","setRoundRobinOptions","searchKey","setSearchKey","isSpeakerOrderModalOpen","setIsSpeakerOrderModalOpen","todaysTopic","setTodaysTopic","arrangedList","setArrangedList","isLaunchPage","setIsLaunchPage","filteredSpeakerList","setFilteredSpeakerList","searchAction","searchValue","filter","singlePerson","toLowerCase","includes","timerList","orderGenerateAction","randomOrderedList","sort","Math","random","unshift","list","newGuestEnterAction","Box","Autocomplete","event","newValue","options","getOptionLabel","option","getOptionDisabled","isDisabled","getOptionSelected","a","margin","placeholder","renderInput","params","Body","path","exact","component","Layout","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","webpackContext","req","webpackContextResolve","__webpack_require__","o","Error","code","keys","Object","resolve","module","exports"],"mappings":"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","file":"static/js/main.90911040.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/arjuna.785704a7.jpg\";","export default __webpack_public_path__ + \"static/media/charen.1afd196a.jpg\";","export default __webpack_public_path__ + \"static/media/commonAvatar.bcfaecf2.png\";","export default __webpack_public_path__ + \"static/media/dilrukshi.1fc60a01.jpg\";","export default __webpack_public_path__ + \"static/media/dinusha.02f6b40e.jpg\";","export default __webpack_public_path__ + \"static/media/dulith.8324a458.jpg\";","export default __webpack_public_path__ + \"static/media/gayal.e4374c5f.png\";","export default __webpack_public_path__ + \"static/media/guest.e2932e0b.png\";","export default __webpack_public_path__ + \"static/media/guest1.00d08fb7.jpg\";","export default __webpack_public_path__ + \"static/media/kavingi.5964fdbd.jpg\";","export default __webpack_public_path__ + \"static/media/kirisanth.65215827.jpg\";","export default __webpack_public_path__ + \"static/media/malya.55b50486.jpg\";","export default __webpack_public_path__ + \"static/media/shanaka.2ae0e583.jpg\";","export default __webpack_public_path__ + \"static/media/shemaya.b581df66.jpg\";","export default __webpack_public_path__ + \"static/media/yasasmi.f64625e7.jpg\";","import React from 'react';\r\nimport \"./Layout.scss\";\r\n\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport logo from \"../../assets/tmLogo.png\"; \r\n\r\nexport default function Header(props){\r\n    return(\r\n        <Grid>\r\n            <Grid container display=\"flex\" className=\"logoAndName\">\r\n                <img className=\"logo-image\" height={80} src={logo}/>\r\n                <Typography >CIPM TOASTMASTERS CLUB</Typography>\r\n            </Grid>\r\n        </Grid>\r\n        \r\n    );\r\n}  ","import React, { useState } from 'react';\r\nimport { Grid, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Typography  } from '@material-ui/core';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\n\r\nexport default function GuestAddingModal(props){\r\n    const { isModalOpen, modalCloseAction, guestDataCallback } = props;\r\n\r\n    const [ newGuestList, setNewGuestList ] = useState([{\r\n        name: \"\",\r\n        isError: false   \r\n    }]);\r\n\r\n    const guestAddAction = (e, index) => {\r\n        let canAdd = true;\r\n        newGuestList.map((singleGuest) => {\r\n            if(!singleGuest.name){\r\n                singleGuest.isError = true;\r\n                canAdd = false;\r\n            }\r\n        });\r\n\r\n        if(canAdd){\r\n            newGuestList.push({\r\n                name: \"\",\r\n                isError: false\r\n            });\r\n        }\r\n        setNewGuestList([...newGuestList]);\r\n    };\r\n\r\n    const guestDeleteAction = (e, index)  => {\r\n        newGuestList.splice(index,1);\r\n        setNewGuestList([...newGuestList]);\r\n    };\r\n\r\n    const nameChangeAction = (e, index)  => {\r\n        newGuestList[index].name = e.target.value;\r\n        newGuestList[index].isError = false;\r\n        setNewGuestList([...newGuestList]);\r\n    };\r\n\r\n    const saveGuestAction = () => {\r\n        let canSave = true;\r\n        newGuestList.map((singleGuest) => {\r\n            if(!singleGuest.name){\r\n                singleGuest.isError = true;\r\n                canSave = false;\r\n            }\r\n        });\r\n\r\n        if(canSave){\r\n            guestDataCallback(newGuestList);\r\n            modalCloseAction();\r\n        }\r\n        setNewGuestList([...newGuestList]);\r\n    };\r\n\r\n    return(\r\n        <Dialog\r\n            className=\"modalMainContainer\"\r\n            open={ isModalOpen }\r\n            onClose={ () => { modalCloseAction(); } }\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\" className=\"modalHeader\">\r\n                Add Today's Guests Here\r\n                <CancelIcon \r\n                    className=\"cancelIcon\" \r\n                    fontSize=\"large\"\r\n                    onClick={ () => { modalCloseAction(false); } }\r\n                />\r\n            </DialogTitle>\r\n            <DialogContent className=\"modalContext\">\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    {\r\n                        newGuestList.map((singleGuest, singleGuestIndex) => { \r\n                            return(\r\n                                <Grid container className=\"singleFieldBlock\" fullWidth>\r\n                                    <Grid item lg={1} md={1}>\r\n                                        <h3>{ singleGuestIndex + 1 }</h3>\r\n                                    </Grid>\r\n                                    <Grid item lg={8} md={8}>\r\n                                    <TextField \r\n                                        fullWidth\r\n                                        id=\"outlined-basic\" \r\n                                        size=\"small\"\r\n                                        label=\"Enter the Guest's Name\" \r\n                                        className=\"nameTextBox\"\r\n                                        variant=\"outlined\"\r\n                                        error={ singleGuest.isError }\r\n                                        value={ singleGuest.name }\r\n                                        onChange={ (e) => { nameChangeAction(e, singleGuestIndex) } }\r\n                                    />\r\n                                    </Grid>\r\n                                    <Grid item lg={3} md={3} className=\"addAndDelete\">\r\n                                        {\r\n                                            newGuestList.length > 1 &&\r\n                                            <DeleteIcon\r\n                                                fontSize=\"large\"\r\n                                                className=\"actionIcon\"\r\n                                                onClick={ (e) => { guestDeleteAction(e, singleGuestIndex) } }\r\n                                            />\r\n                                        }\r\n                                        {\r\n                                            (singleGuestIndex === (newGuestList.length - 1)) &&\r\n                                            <AddCircleOutlineIcon\r\n                                                fontSize=\"large\"\r\n                                                className=\"actionIcon\"\r\n                                                onClick={ (e) => { guestAddAction(e, singleGuestIndex) } }\r\n                                            />\r\n                                        }\r\n                                    </Grid>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    className=\"guessAddBtn\" \r\n                    size=\"large\"\r\n                    onClick={ () => { saveGuestAction(); } }\r\n                >\r\n                    Save\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        \r\n    );\r\n}  ","import React, {useEffect, useState} from 'react';\r\nimport \"./SetUp.scss\";\r\n\r\nimport { Grid } from '@material-ui/core';\r\n\r\nexport default function ListSelection(props){\r\n    return(\r\n        <Grid className=\"listSelectionContainer\" container>\r\n            {\r\n                props.speakerList.map((singleSpeaker, singleSpeakerIndex) => {\r\n                    return(\r\n                        <Grid item md={4} lg={4} sm={12} className=\"outSingleUserBlock\" container>\r\n                            <Grid \r\n                                className={ \"singleUserBlock \" + (singleSpeaker.isSelected ? \"selectedSingleUserBlock\" : \"\") } \r\n                                container\r\n                                onClick={ () => { props.speakerSelectAction(singleSpeakerIndex); } }\r\n                                >\r\n                                <Grid item md={3} lg={3} sm={3}>\r\n                                    <img \r\n                                        height={50} \r\n                                        width={50} \r\n                                        src={ require(`../../assets/${singleSpeaker.imageLink}`).default }\r\n                                    />\r\n                                </Grid>\r\n                                <Grid item md={9} lg={9} sm={9}>\r\n                                    <h2>{ singleSpeaker.name }</h2>\r\n                                </Grid>\r\n                                {/* <Grid item md={2} lg={2} sm={3}>\r\n                                    <h2>{ singleSpeakerIndex + 1 }</h2>\r\n                                </Grid> */}\r\n                            </Grid>\r\n                        </Grid>\r\n                    );\r\n                })\r\n            }\r\n        </Grid>\r\n    );\r\n}  ","export const nameList = [\r\n    {\r\n        name: \"DTM Dilrukshi\",\r\n        imageLink: \"dilrukshi.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Dinusha\",\r\n        imageLink: \"dinusha.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Kavingi\",\r\n        imageLink: \"kavingi.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Malya\",\r\n        imageLink: \"malya.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Yasasmi\",\r\n        imageLink: \"yasasmi.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Gayal\",\r\n        imageLink: \"gayal.png\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Shanaka\",\r\n        imageLink: \"shanaka.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Dulith\",\r\n        imageLink: \"dulith.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Charen\",\r\n        imageLink: \"charen.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Arjuna\",\r\n        imageLink: \"arjuna.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"DTM Arjuna\",\r\n        imageLink: \"arjuna.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Kirisanth\",\r\n        imageLink: \"kirisanth.jpg\",\r\n        isSelected: false\r\n    },\r\n    {\r\n        name: \"TM Shemaya\",\r\n        imageLink: \"shemaya.jpg\",\r\n        isSelected: false\r\n    },\r\n];","import React, { useState } from 'react';\r\nimport { Grid, Button, Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, TextField, Typography  } from '@material-ui/core';\r\nimport CancelIcon from '@material-ui/icons/Cancel';\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport ReplayIcon from '@material-ui/icons/Replay';\r\n\r\nexport default function SpeakerOrdering(props){\r\n    const { \r\n        isModalOpen, \r\n        modalCloseAction, \r\n        orderedList,\r\n        reOrderCallback,\r\n        topic,\r\n        topicChangeAction,\r\n        launchCallback\r\n    } = props;\r\n\r\n    return(\r\n        <Dialog\r\n            className=\"modalMainContainer\"\r\n            open={ isModalOpen }\r\n            onClose={ () => { modalCloseAction(); } }\r\n            aria-labelledby=\"alert-dialog-title\"\r\n            aria-describedby=\"alert-dialog-description\"\r\n        >\r\n            <DialogTitle id=\"alert-dialog-title\" className=\"modalHeader\">\r\n                Speaker Order\r\n                <CancelIcon \r\n                    className=\"cancelIcon\" \r\n                    fontSize=\"large\"\r\n                    onClick={ () => { modalCloseAction(false); } }\r\n                />\r\n            </DialogTitle>\r\n            <DialogContent className=\"modalContext\">\r\n                <DialogContentText id=\"alert-dialog-description\">\r\n                    <TextField \r\n                        className=\"topicField\"\r\n                        fullWidth\r\n                        size=\"small\"\r\n                        value={ topic }\r\n                        onChange={ (e) => { topicChangeAction(e.target.value); } }\r\n                        id=\"outlined-basic\" \r\n                        label=\"Enter Today's Topic\" \r\n                        variant=\"outlined\"\r\n                    />\r\n                    {\r\n                        orderedList.map((singleSpeaker, singleSpeakerIndex) => { \r\n                            return(\r\n                                <Grid container className=\"singleSpeakerBlock\" fullWidth>\r\n                                    <Grid item lg={1} md={1}>\r\n                                        <h3>{ singleSpeakerIndex + 1 }</h3>\r\n                                    </Grid>\r\n                                    <Grid item lg={10} md={10}>\r\n                                        <h3>{ singleSpeaker.name + (singleSpeaker.type ? (\" - \" + singleSpeaker.type) : \"\") }</h3>\r\n                                    </Grid>\r\n                                </Grid>\r\n                            )\r\n                        })\r\n                    }\r\n                </DialogContentText>\r\n            </DialogContent>\r\n            <DialogActions>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    className=\"cancelBtn\" \r\n                    size=\"large\"\r\n                    onClick={ () => { reOrderCallback(); } }\r\n                    endIcon={<ReplayIcon/>} \r\n\r\n                >\r\n                    ReOrder\r\n                </Button>\r\n                <Button \r\n                    variant=\"contained\" \r\n                    className=\"guessAddBtn launchBtn\" \r\n                    size=\"large\"\r\n                    onClick={ () => { launchCallback(); } }\r\n                    endIcon={<PlayArrowIcon/>} \r\n                >\r\n                    Launch\r\n                </Button>\r\n            </DialogActions>\r\n        </Dialog>\r\n        \r\n    );\r\n}  ","\r\nimport React, { useEffect, useState } from 'react';\r\nimport SimpleImageSlider from \"react-simple-image-slider\";\r\nimport { Grid, Typography, Button, TextField, Box } from '@material-ui/core';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport \"./Launch.scss\";\r\nimport SettingsIcon from '@material-ui/icons/Settings';\r\n\r\nconst Launch = (props) => {\r\n    const{ personList, topic, backToSetupAction } = props;\r\n    const[speakerList, setSpeakerList] = useState(cloneDeep(personList));\r\n    const[currentSpeakerIndex, setCurrentSpeakerIndex] = useState(0);\r\n\r\n    useEffect(() => {\r\n        setSpeakerList(personList.map((singleSpeaker) => {\r\n            return {\r\n                ...singleSpeaker,\r\n                url: require(\"../../assets/\" + singleSpeaker.imageLink).default\r\n            }\r\n        }));\r\n    },[personList]);\r\n\r\n    return (\r\n        <Grid className=\"launchContainer\">\r\n            <Grid container>\r\n                <Grid container display=\"flex\" justifyContent=\"center\" lg={10} md={10} sm={10}>\r\n                    <h2 className=\"heading\">Topic - {topic}</h2>\r\n                </Grid>\r\n                <Grid item lg={2} md={2} sm={6} display=\"flex\" container justifyContent=\"flex-end\" className=\"btnWrap\">\r\n                    <Button \r\n                        // fullWidth \r\n                        size=\"large\"\r\n                        className=\"setupBtn\" \r\n                        variant=\"contained\" \r\n                        endIcon={<SettingsIcon/>} \r\n                        onClick={ () => { backToSetupAction() } }\r\n                        >\r\n                        Back to Setup\r\n                    </Button>\r\n                </Grid>\r\n            </Grid>\r\n            <Grid container>\r\n                <Grid item md={8} lg={8} sm={8}>\r\n                    <SimpleImageSlider\r\n                        width={600}\r\n                        height={490}\r\n                        images={speakerList}\r\n                        showBullets={true}\r\n                        showNavs={true}\r\n                        navSize={ 80 }\r\n                        loop={ false }\r\n                        onStartSlide={ (index) => { setCurrentSpeakerIndex(index - 1) } }\r\n                    />\r\n                    <Grid container display=\"flex\" justifyContent=\"center\">\r\n                        {\r\n                            speakerList[currentSpeakerIndex] &&\r\n                            <h2 className=\"speakerName\">\r\n                                {speakerList[currentSpeakerIndex].name + (speakerList[currentSpeakerIndex].type ? (\" - \" + speakerList[currentSpeakerIndex].type) : \"\")}\r\n                            </h2>\r\n                        }\r\n                    </Grid>\r\n                </Grid>\r\n                <Grid item md={4} lg={4} sm={4}>\r\n                    {\r\n                        speakerList.slice(currentSpeakerIndex, speakerList.length).map((singleSpeaker, singleSpeakerIndex) => (\r\n                            <Grid container className={ (singleSpeakerIndex === 0) ? \"currentName\" : \"\"}>\r\n                                <Grid md={2} lg={2} sm={2}>\r\n                                    <h3>{ currentSpeakerIndex + 1 + singleSpeakerIndex }</h3>\r\n                                </Grid>\r\n                                <Grid md={10} lg={10} sm={10}>\r\n                                    <h3>{ singleSpeaker.name + (singleSpeaker.type ? (\" - \" + singleSpeaker.type) : \"\") }</h3>\r\n                                </Grid>\r\n                            </Grid>\r\n                        ))\r\n                    }\r\n                </Grid>\r\n            </Grid>\r\n        </Grid>\r\n    )\r\n}\r\n\r\nexport default Launch;","import React, {useEffect, useState} from 'react';\r\nimport \"./SetUp.scss\";\r\n\r\nimport { Grid, Typography, Button, TextField, Box } from '@material-ui/core';\r\nimport { Autocomplete } from '@material-ui/lab';\r\n\r\nimport PersonAddIcon from '@material-ui/icons/PersonAdd';\r\nimport GuestAddingModal from './GuestAddingModal';\r\nimport ListSelection from './ListSelection';\r\nimport { nameList } from './nameList';\r\nimport AccessAlarmIcon from '@material-ui/icons/AccessAlarm';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport cloneDeep from 'lodash/cloneDeep';\r\nimport SpeakerOrdering from './SpeakerOrdering';\r\nimport GamesIcon from '@material-ui/icons/Games';\r\nimport Launch from '../launch/Launch';\r\n\r\nexport default function SetUp(props){\r\n    const [isGuestModalOpen, setIsGuestModalOpen] = useState(false);\r\n    const [newGuestList, setNewGuestList] = useState([]);\r\n    const [selectedTimer, setSelectedTimer] = useState();\r\n    const [selectedTimerObj, setSelectedTimerObj] = useState();\r\n    const [timerOptions, setTimerOptions] = useState([]);\r\n    const [selectedRoundRobin, setSelectedRoundRobin] = useState();\r\n    const [selectedRoundRobinObj, setSelectedRoundRobinObj] = useState();\r\n    const [roundRobinOptions, setRoundRobinOptions] = useState([]);\r\n    const [searchKey, setSearchKey] = useState(\"\");\r\n    const [isSpeakerOrderModalOpen, setIsSpeakerOrderModalOpen] = useState(false);\r\n    const [todaysTopic, setTodaysTopic] = useState(\"\");\r\n    const [arrangedList, setArrangedList] = useState([]);\r\n    const [isLaunchPage, setIsLaunchPage] = useState(false);\r\n    \r\n    const [speakerList, setSpeakerList] = useState(cloneDeep(nameList));\r\n    const [filteredSpeakerList, setFilteredSpeakerList] = useState(cloneDeep(nameList));\r\n\r\n    useEffect(() => {\r\n        newGuestList.map((singleGuest) => {\r\n            speakerList.push({\r\n                name: \"Guest \" + singleGuest.name,\r\n                imageLink: \"guest1.jpg\",\r\n                isSelected: true\r\n            });\r\n            filteredSpeakerList.push({\r\n                name: \"Guest \" + singleGuest.name,\r\n                imageLink: \"guest1.jpg\",\r\n                isSelected: true\r\n            });\r\n        });\r\n        setSpeakerList([...speakerList]);\r\n        setFilteredSpeakerList([...filteredSpeakerList]);\r\n        searchAction(searchKey);\r\n    },[newGuestList]);\r\n\r\n    const searchAction = ((searchValue) => {\r\n        setSearchKey(searchValue);\r\n        setFilteredSpeakerList([...speakerList.filter((singlePerson) => {\r\n            return(\r\n                singlePerson.name.toLowerCase().includes(searchValue.toLowerCase()) &&\r\n                singlePerson.name !== selectedTimer && singlePerson.name !== selectedRoundRobin\r\n            );\r\n        })]);\r\n    });\r\n\r\n    useEffect(() => {\r\n        let timerList = nameList.filter((singlePerson) => {\r\n            return(singlePerson.name !== selectedRoundRobin);\r\n        });\r\n        setTimerOptions([...timerList]);\r\n        searchAction(searchKey);\r\n    },[selectedRoundRobin]);\r\n\r\n    useEffect(() => {\r\n        let timerList = nameList.filter((singlePerson) => {\r\n            return((singlePerson.name !== selectedTimer));\r\n        });\r\n        setRoundRobinOptions([...timerList]);\r\n        searchAction(searchKey);\r\n    },[selectedTimer]);\r\n\r\n    const newGuestEnterAction = (list) => {\r\n        setNewGuestList([...list]);\r\n    }\r\n\r\n    const speakerSelectAction = (index) => {\r\n        speakerList[index].isSelected = !speakerList[index].isSelected;\r\n        filteredSpeakerList[index].isSelected = speakerList[index].isSelected;\r\n        setSpeakerList([...speakerList]);\r\n        setFilteredSpeakerList([...filteredSpeakerList]);\r\n    }\r\n\r\n    const orderGenerateAction = (() => {\r\n        let pureSpeakerList = speakerList.filter((singlePerson) => {\r\n            return(singlePerson.isSelected && singlePerson.name !== selectedTimer && singlePerson.name !== selectedRoundRobin);\r\n        });\r\n        let randomOrderedList = pureSpeakerList.sort(() => Math.random() - 0.5);\r\n        if(selectedRoundRobin){\r\n            selectedRoundRobinObj[\"type\"]=\"RR Master\";\r\n            randomOrderedList.unshift(selectedRoundRobinObj);\r\n        }\r\n        if(selectedTimer){\r\n            selectedTimerObj[\"type\"]=\"Timer\";\r\n            randomOrderedList.push(selectedTimerObj);\r\n        }\r\n        setArrangedList([...randomOrderedList]);   \r\n        setIsSpeakerOrderModalOpen(true);     \r\n    })\r\n\r\n    const launchAction = () => {\r\n        setIsSpeakerOrderModalOpen(false);\r\n        setIsLaunchPage(true);\r\n    }\r\n\r\n    return(\r\n        <>\r\n            {\r\n                !isLaunchPage &&\r\n                <Grid className=\"setupContainer\">\r\n                    {\r\n                        isGuestModalOpen &&\r\n                        <GuestAddingModal\r\n                            isModalOpen= { isGuestModalOpen }\r\n                            modalCloseAction = { () => { setIsGuestModalOpen(false) } }\r\n                            guestDataCallback= { (list) => { newGuestEnterAction(list) } }\r\n                        />\r\n                    }\r\n                    {\r\n                        isSpeakerOrderModalOpen &&\r\n                        <SpeakerOrdering\r\n                            isModalOpen= { isSpeakerOrderModalOpen }\r\n                            modalCloseAction = { () => { setIsSpeakerOrderModalOpen(false) } }\r\n                            orderedList={ arrangedList }\r\n                            reOrderCallback= { () => { orderGenerateAction() } }\r\n                            topic={ todaysTopic }\r\n                            topicChangeAction={ (topic) => {setTodaysTopic(topic)} }\r\n                            launchCallback={ () => { launchAction(); } }\r\n                        />\r\n                    }\r\n                    <Grid container display=\"flex\" justifyContent=\"space-between\">\r\n                        <Grid item lg={3} md={3} sm={6} className=\"searchMainContainer\">\r\n                            <Box className=\"searchIcon\"><SearchIcon height={30} /></Box>\r\n                            <TextField \r\n                                className=\"searchInput\"\r\n                                fullWidth\r\n                                value={ searchKey }\r\n                                onChange={ (e) => { searchAction(e.target.value); } }\r\n                                id=\"outlined-basic\" \r\n                                label=\"Search TM\" \r\n                                variant=\"outlined\"\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"parentAutoComplete\" lg={3} md={3} sm={6}>\r\n                            <Box className=\"innerIcon\"><AccessAlarmIcon height={30} /></Box>\r\n                            <Autocomplete\r\n                                className=\"autoFillInput\"\r\n                                id='searchSelection'\r\n                                name='searchSelection'\r\n                                value={selectedTimer}\r\n                                onChange={(event,newValue)=>{\r\n                                    if(!newValue){\r\n                                        setSelectedTimer(null);\r\n                                        setSelectedTimerObj(null);\r\n                                    }else{\r\n                                        setSelectedTimer(newValue.name);\r\n                                        setSelectedTimerObj(newValue);\r\n                                    }\r\n                                }}\r\n                                options={timerOptions}\r\n                                getOptionLabel={(option)=>option[\"name\"]?option[\"name\"]:\"\"}\r\n                                getOptionDisabled={(option)=>option.isDisabled?true:false}\r\n                                getOptionSelected={async (option,value)=>option && value && option.id===value.id }\r\n                                margin={\"none\"}\r\n                                placeholder={ \"Timer\" }\r\n                                fullWidth\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        margin=\"none\"\r\n                                        variant=\"outlined\"\r\n                                        placeholder={ \"Timer\" }\r\n                                    />\r\n                                )}\r\n                                // loading={isClinicsLoading}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item className=\"parentAutoComplete\" lg={3} md={3} sm={6}>\r\n                            <Box className=\"innerIcon\"><PersonIcon height={30} /></Box>\r\n                            <Autocomplete\r\n                                className=\"autoFillInput\"\r\n                                id='searchSelection'\r\n                                name='searchSelection'\r\n                                value={selectedRoundRobin}\r\n                                onChange={(event,newValue)=>{\r\n                                    if(!newValue){\r\n                                        setSelectedRoundRobin(null);\r\n                                        setSelectedRoundRobinObj(null);\r\n                                    }else{\r\n                                        setSelectedRoundRobin(newValue.name);\r\n                                        setSelectedRoundRobinObj(newValue);\r\n                                    }\r\n                                }}\r\n                                options={roundRobinOptions}\r\n                                getOptionLabel={(option)=>option[\"name\"]?option[\"name\"]:\"\"}\r\n                                getOptionDisabled={(option)=>option.isDisabled?true:false}\r\n                                getOptionSelected={async (option,value)=>option && value && option.id===value.id }\r\n                                margin={\"none\"}\r\n                                placeholder={ \"Round Robin Master\" }\r\n                                fullWidth\r\n                                renderInput={(params) => (\r\n                                    <TextField\r\n                                        {...params}\r\n                                        margin=\"none\"\r\n                                        variant=\"outlined\"\r\n                                        placeholder={ \"Round Robin Master\" }\r\n                                    />\r\n                                )}\r\n                                // loading={isClinicsLoading}\r\n                            />\r\n                        </Grid>\r\n                        <Grid item lg={3} md={3} sm={6} container>\r\n                            <Grid item lg={6} md={6} sm={6} container justifyContent=\"flex-end\">\r\n                                <Button \r\n                                    // fullWidth \r\n                                    size=\"large\"\r\n                                    className=\"cancelBtn\" \r\n                                    variant=\"contained\" \r\n                                    endIcon={<PersonAddIcon/>} \r\n                                    onClick={ (e) => { setIsGuestModalOpen(true) } }\r\n                                    >\r\n                                    Add Guests\r\n                                </Button>\r\n                            </Grid>\r\n                            <Grid item lg={5} md={5} sm={6} container>\r\n                                <Button \r\n                                    // fullWidth \r\n                                    size=\"large\"\r\n                                    className=\"guessAddBtn\" \r\n                                    variant=\"contained\" \r\n                                    endIcon={<GamesIcon/>} \r\n                                    onClick={ (e) => { orderGenerateAction() } }\r\n                                    >\r\n                                    Generate\r\n                                </Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Grid className=\"listView\">\r\n                        <ListSelection\r\n                            speakerList={ filteredSpeakerList }\r\n                            speakerSelectAction={ (index) => { speakerSelectAction(index) } }\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            }\r\n            {\r\n                isLaunchPage && (arrangedList.length > 0) &&\r\n                <Launch\r\n                    personList={ arrangedList }\r\n                    topic={ todaysTopic }\r\n                    backToSetupAction= { () => { setIsLaunchPage(false) } }\r\n                />\r\n            }\r\n        </>\r\n    );\r\n}  ","import React from 'react';\r\nimport { Grid, Typography } from '@material-ui/core';\r\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport SetUp from \"../sessiionSetUp/SetUp\";\r\n\r\nexport default function Body(props){\r\n    return(\r\n        <Grid className=\"body-container\">\r\n            <Router>\r\n                <Switch>\r\n                    <Route path=\"/RoundRobinMaster\" exact component={SetUp}/>\r\n                </Switch>\r\n            </Router>\r\n        </Grid>\r\n    );\r\n}  ","import React from 'react';\r\nimport Header from './Header';\r\nimport Body from './Body';\r\n\r\nexport default function Layout(props){\r\n    return(\r\n        <>\r\n            <Header/>\r\n            <Body/>\r\n        </>\r\n    );\r\n}  ","import './App.scss';\r\nimport Layout from './components/layout/Layout';\r\nimport { Grid } from '@material-ui/core';\r\n\r\nfunction App() {\r\n  return (\r\n    <Grid className=\"main-container\">\r\n      <Layout/>\r\n    </Grid>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n","export default __webpack_public_path__ + \"static/media/tmLogo.ec057b94.png\";","var map = {\n\t\"./arjuna.jpg\": 158,\n\t\"./charen.jpg\": 159,\n\t\"./commonAvatar.png\": 160,\n\t\"./dilrukshi.jpg\": 161,\n\t\"./dinusha.jpg\": 162,\n\t\"./dulith.jpg\": 163,\n\t\"./gayal.png\": 164,\n\t\"./guest.png\": 165,\n\t\"./guest1.jpg\": 166,\n\t\"./kavingi.jpg\": 167,\n\t\"./kirisanth.jpg\": 168,\n\t\"./malya.jpg\": 169,\n\t\"./shanaka.jpg\": 170,\n\t\"./shemaya.jpg\": 171,\n\t\"./tmLogo.png\": 88,\n\t\"./yasasmi.jpg\": 172\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 98;"],"sourceRoot":""}